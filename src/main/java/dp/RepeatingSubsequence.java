/**
 * Problem Description
 * Given a string A, find if there is any subsequence that repeats itself.
 *
 * A subsequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.
 *
 * NOTE:
 * 1. Subsequence length should be greater than or equal to 2.
 * 2. The repeating subsequence should be disjoint that is in both the sequence no character in the same order and position should be taken from the same index of the original string.
 *
 *
 *
 * Problem Constraints
 * 1 <= length(A) <= 100
 *
 *
 *
 * Input Format
 * The first and the only argument of input contains a string A.
 *
 *
 *
 * Output Format
 * Return an integer, 1 if there is any subsequence which repeat itself else return 0.
 *
 *
 *
 * Example Input
 * Input 1:
 *
 *  A = "abab"
 * Input 2:
 *
 *  A = "abba"
 *
 *
 * Example Output
 * Output 1:
 *
 *  1
 * Output 2:
 *
 *  0
 *
 *
 * Example Explanation
 * Explanation 1:
 *
 *  "ab" is repeated.
 * Explanation 2:
 *
 *  There is no repeating subsequence.
 */
package dp;

public class RepeatingSubsequence {
    public static void main(String[] args) {
        String A = "abab";
        System.out.println(solve(A));
    }
    public static int solve(String A) {
        int n = A.length();
        int[][] dp = new int[n+1][n+1];
        for(int i=1;i<=n;i++){
            for(int j=1;j<=n;j++){
                if(A.charAt(i-1)==A.charAt(j-1) && i!=j){
                    dp[i][j] = 1+dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        if(dp[n][n]>=2){
            return 1;
        }
        return 0;
    }
    public static int solve(String A, String B, int i, int j) {
        if (i < 0 || j < 0) {
            return 0;
        }
        if (A.charAt(i) == B.charAt(j) && i != j) {
            return 1 + solve(A, B, i-1, j-1);
        } else {
            return Math.max(solve(A, B, i-1, j), solve(A, B, i, j-1));
        }
    }
}
